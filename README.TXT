Project: naive-ticket-machine
Authors: David Barnes and Michael Kölling

This project is part of the material for the book

   Objects First with Java - A Practical Introduction using BlueJ
   Seventh edition
   David J. Barnes and Michael Kölling
   Pearson Education

It is discussed in chapter 2.

Purpose of project: To illustrate the basics of fields, constructors, and methods.
How to start this project: Create one or more TicketMachine objects.

1. Once pressed the getPrice method, I receive a value of 67. Once I print a ticket, my balance goes back to 0. Which means I need to insertMoney method to bring it back to the original amount.
2. The balance turns to 0.
3. If you put too much money in, and you print a ticket the balance will be at 0, if you do not add enough money it stays in the machine and it won't print a ticket.
5. When you print another ticket on the 2nd machine the price of the ticket is different, in my case my first ticket machine costed 67 cents but my second machine costed 76 cents.
6. public class TicketMachine{insert}
7. If you put class public there is 8 errors that appear. Error(s) found in class was shown once I try to compile the TicketMachine.
8. If you take out public it will work the same as if public was there written on that line.
9. Taking out the word class on the code line it comes with errors, so the word class needs to be there to make the code work.
10. The constructor is called (Public TicketMachine)
11. They are capitilized because they need to copy the name of the object that they are controlling so that it can read it properly.
12. private in count; is determining the initial value of what you're inputing to the code, private Student representative; it is a member of a student class, private Server host; The client of where the code is being written on. 
13. alive, tutor, game.
14. Student representative, Server host, Person tutor, Game game.
15. Yes it works! The order of the following are changed but there isn't any error while changing them, but there is an error if you put the same class twice.
16. Yes it is necessary to have a semilicolon at the end since it is a rule and then it wont.
17. int Status;
18. There's no class it's public.
19. Just 1 Public.
20. No they don't need a persistent storage, 
21. public Pet(String petsName)
    {
      this.name = petsName;
    }
23. Their header is an integer (int), and their bodies are voids.
24. 